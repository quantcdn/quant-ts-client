/**
 * QuantCloud API
 * QuantCloud API
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import localVarRequest from 'request';
import http from 'http';

/* tslint:disable:no-unused-locals */
import { ScalingPolicy } from '../model/scalingPolicy';

import { ObjectSerializer, Authentication, VoidAuth, Interceptor } from '../model/models';

import { HttpError, RequestFile } from './apis';

let defaultBasePath = 'http://localhost';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum ScalingPolicyApiApiKeys {
}

export class ScalingPolicyApi {
    protected _basePath = defaultBasePath;
    protected _defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
    }

    protected interceptors: Interceptor[] = [];

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    set defaultHeaders(defaultHeaders: any) {
        this._defaultHeaders = defaultHeaders;
    }

    get defaultHeaders() {
        return this._defaultHeaders;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: ScalingPolicyApiApiKeys, value: string) {
        (this.authentications as any)[ScalingPolicyApiApiKeys[key]].apiKey = value;
    }

    public addInterceptor(interceptor: Interceptor) {
        this.interceptors.push(interceptor);
    }

    /**
     * 
     * @summary Get the scaling policy for an environment
     * @param organisation The organisation ID
     * @param application The application ID
     * @param environment The environment ID
     */
    public async _0a9bd92370931ddb0cef0781aa65b0a8 (organisation: string, application: string, environment: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/organisations/{organisation}/applications/{application}/environments/{environment}/scaling-policy'
            .replace('{' + 'organisation' + '}', encodeURIComponent(String(organisation)))
            .replace('{' + 'application' + '}', encodeURIComponent(String(application)))
            .replace('{' + 'environment' + '}', encodeURIComponent(String(environment)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'organisation' is not null or undefined
        if (organisation === null || organisation === undefined) {
            throw new Error('Required parameter organisation was null or undefined when calling _0a9bd92370931ddb0cef0781aa65b0a8.');
        }

        // verify required parameter 'application' is not null or undefined
        if (application === null || application === undefined) {
            throw new Error('Required parameter application was null or undefined when calling _0a9bd92370931ddb0cef0781aa65b0a8.');
        }

        // verify required parameter 'environment' is not null or undefined
        if (environment === null || environment === undefined) {
            throw new Error('Required parameter environment was null or undefined when calling _0a9bd92370931ddb0cef0781aa65b0a8.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @summary Delete the scaling policy for an environment
     * @param organisation The organisation ID
     * @param application The application ID
     * @param environment The environment ID
     * @param policyName The policy name
     */
    public async a8f77b5e3cce5cefa088c3ed72d007e7 (organisation: string, application: string, environment: string, policyName: string, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/organisations/{organisation}/applications/{application}/environments/{environment}/scaling-policy/{policyName}'
            .replace('{' + 'organisation' + '}', encodeURIComponent(String(organisation)))
            .replace('{' + 'application' + '}', encodeURIComponent(String(application)))
            .replace('{' + 'environment' + '}', encodeURIComponent(String(environment)))
            .replace('{' + 'policyName' + '}', encodeURIComponent(String(policyName)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'organisation' is not null or undefined
        if (organisation === null || organisation === undefined) {
            throw new Error('Required parameter organisation was null or undefined when calling a8f77b5e3cce5cefa088c3ed72d007e7.');
        }

        // verify required parameter 'application' is not null or undefined
        if (application === null || application === undefined) {
            throw new Error('Required parameter application was null or undefined when calling a8f77b5e3cce5cefa088c3ed72d007e7.');
        }

        // verify required parameter 'environment' is not null or undefined
        if (environment === null || environment === undefined) {
            throw new Error('Required parameter environment was null or undefined when calling a8f77b5e3cce5cefa088c3ed72d007e7.');
        }

        // verify required parameter 'policyName' is not null or undefined
        if (policyName === null || policyName === undefined) {
            throw new Error('Required parameter policyName was null or undefined when calling a8f77b5e3cce5cefa088c3ed72d007e7.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
    /**
     * 
     * @summary Update the scaling policy for an environment
     * @param organisation The organisation ID
     * @param application The application ID
     * @param environment The environment ID
     * @param scalingPolicy 
     */
    public async e562f52be1bd6beac2acd6e54806cc0b (organisation: string, application: string, environment: string, scalingPolicy: ScalingPolicy, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body?: any;  }> {
        const localVarPath = this.basePath + '/organisations/{organisation}/applications/{application}/environments/{environment}/scaling-policy'
            .replace('{' + 'organisation' + '}', encodeURIComponent(String(organisation)))
            .replace('{' + 'application' + '}', encodeURIComponent(String(application)))
            .replace('{' + 'environment' + '}', encodeURIComponent(String(environment)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this._defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'organisation' is not null or undefined
        if (organisation === null || organisation === undefined) {
            throw new Error('Required parameter organisation was null or undefined when calling e562f52be1bd6beac2acd6e54806cc0b.');
        }

        // verify required parameter 'application' is not null or undefined
        if (application === null || application === undefined) {
            throw new Error('Required parameter application was null or undefined when calling e562f52be1bd6beac2acd6e54806cc0b.');
        }

        // verify required parameter 'environment' is not null or undefined
        if (environment === null || environment === undefined) {
            throw new Error('Required parameter environment was null or undefined when calling e562f52be1bd6beac2acd6e54806cc0b.');
        }

        // verify required parameter 'scalingPolicy' is not null or undefined
        if (scalingPolicy === null || scalingPolicy === undefined) {
            throw new Error('Required parameter scalingPolicy was null or undefined when calling e562f52be1bd6beac2acd6e54806cc0b.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'PUT',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(scalingPolicy, "ScalingPolicy")
        };

        let authenticationPromise = Promise.resolve();
        authenticationPromise = authenticationPromise.then(() => this.authentications.default.applyToRequest(localVarRequestOptions));

        let interceptorPromise = authenticationPromise;
        for (const interceptor of this.interceptors) {
            interceptorPromise = interceptorPromise.then(() => interceptor(localVarRequestOptions));
        }

        return interceptorPromise.then(() => {
            if (Object.keys(localVarFormParams).length) {
                if (localVarUseFormData) {
                    (<any>localVarRequestOptions).formData = localVarFormParams;
                } else {
                    localVarRequestOptions.form = localVarFormParams;
                }
            }
            return new Promise<{ response: http.IncomingMessage; body?: any;  }>((resolve, reject) => {
                localVarRequest(localVarRequestOptions, (error, response, body) => {
                    if (error) {
                        reject(error);
                    } else {
                        if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                            resolve({ response: response, body: body });
                        } else {
                            reject(new HttpError(response, body, response.statusCode));
                        }
                    }
                });
            });
        });
    }
}
